image: $REPO_URL/stage

services:
  - docker:dind

stages:
  - build
  - test
  - e2e
  - release
  - deployment

variables:
  DOCKER_HOST: tcp://localhost:2376/
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  BASE_IMAGE_NAME: polyswarm-client

default:
  before_script:
    - pip install -q --upgrade pip
    - pip install -q $END_TO_END_LIB@$CI_COMMIT_REF_NAME || pip install -q $END_TO_END_LIB
    - e2e init

###############################################################
# Build Stage (jobs inside a stage run in parallel)
###############################################################
dev-pypi:
  tags:
    - kube-small-new
  stage: build
  before_script:
    - pip3 install -q --upgrade pip setuptools twine wheel bump2version
  script:
    - SHORT_SHA=$(git rev-parse --short HEAD) bumpversion --no-commit --no-tag local
    - python setup.py -q bdist_wheel
    - twine upload --skip-existing --disable-progress-bar --non-interactive dist/*

build-linux:
  stage: build
  tags:
    - kube-small-new
  script:
    - e2e dependencies docker/Dockerfile $BASE_IMAGE_NAME
    - sed "s#FROM python:3.7-slim-buster#FROM $REPO_URL/python:3.7-slim-buster#" docker/Dockerfile > docker/Dockerfile.ci
    - docker build
      --build-arg PIP_INDEX_URL
      -f docker/Dockerfile.ci
      -t $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
      -t $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG
      --cache-from=$REPO_URL/$BASE_IMAGE_NAME:latest
      .
    - docker push $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG

build-windows:
  stage: build
  tags:
    - win-participants
  before_script:
    - echo "Skip e2e install in before_script for windows participants"
  script:
    - $env:DOCKER_HOST = ''
    - $env:DOCKER_TLS_CERTDIR = ''
    - $env:DOCKER_TLS_VERIFY = ''
    - $env:DOCKER_CERT_PATH = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    - docker pull $REPO_URL/$BASE_IMAGE_NAME-windows:latest
    - docker build
      -f docker/windows/Dockerfile
      -t $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA
      -t $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_REF_SLUG
      --cache-from=$REPO_URL/$BASE_IMAGE_NAME-windows:latest
      .
    - docker push $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA
    - docker push $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_REF_SLUG

###############################################################
# Test Stage
###############################################################

test-linux:
  stage: test
  tags:
    - kube-small-new
  needs:
    - build-linux
  script:
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    - docker pull mkodockx/docker-clamav
    - docker pull redis
    - docker network create test
    - docker run -d --network test --network-alias clamav mkodockx/docker-clamav
    - docker run -d --network test --network-alias redis redis
    - docker run --env CLAMD_HOST=clamav --network test $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA pytest -s --cov=polyswarmclient

test-push-to-pypi:
  stage: test
  tags:
    - kube-small-new
  only:
    - tags
  script:
    # TODO: Maybe consider executing this inside the polyswarm-client image we just built
    - python setup.py sdist bdist_wheel
    # Using env variables from Gitlab: TWINE_USERNAME, TWINE_PASSWORD, TWINE_REPOSITORY_URL
    # Will try to upload on V.V.VrcN tags, but will not fail if the version already exists in test.pypi.org
    - twine upload
      --skip-existing
      --repository-url $PUBLIC_TWINE_REPOSITORY_URL_TEST
      -u $PUBLIC_TWINE_USERNAME_TEST
      -p $PUBLIC_TWINE_PASSWORD_TEST
      dist/*

test-windows:
  stage: test
  tags:
    - win-participants
  before_script:
    - echo "Skip e2e install in before_script for windows participants"
  needs:
    - build-windows
  script:
    - $env:DOCKER_HOST = ''
    - $env:DOCKER_TLS_CERTDIR = ''
    - $env:DOCKER_TLS_VERIFY = ''
    - $env:DOCKER_CERT_PATH = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    - docker pull $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA
    - docker run $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA powershell -NoProfile -Command "Set-Location C:/polyswarm/$BASE_IMAGE_NAME; pytest -s --cov=polyswarmclient"

###############################################################
# End-to-end Stage
###############################################################

e2e:
  stage: e2e
  tags:
    - kube-new
  needs:
    - test-linux
  except:
    variables:
      - $SKIP_E2E
  script:
    - e2e run

###############################################################
# Release Stage
###############################################################

release-tag-linux:
  stage: release
  tags:
    - kube-small-new
  only:
    - tags
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag from git
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA $REPO_URL/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA polyswarm/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    # Pushes to AWS
    - docker push $REPO_URL/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)

release-latest-linux:
  stage: release
  tags:
    - kube-small-new
  only:
    - master
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA $REPO_URL/$BASE_IMAGE_NAME:latest
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA polyswarm/$BASE_IMAGE_NAME:latest
    # Pushes to AWS
    - docker push $REPO_URL/$BASE_IMAGE_NAME:latest
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/$BASE_IMAGE_NAME:latest

release-pypi:
  tags:
    - kube-small-new
  stage: release
  script:
    # release to internal pypi but do not tag yet
    - e2e release --skip-tag --remote https://github.com/polyswarm/$CI_PROJECT_NAME.git
    # release to public pypi and tag
    - e2e release
      -u $PUBLIC_TWINE_USERNAME
      -p $PUBLIC_TWINE_PASSWORD
      -r $PUBLIC_TWINE_REPOSITORY_URL
      --remote https://github.com/polyswarm/$CI_PROJECT_NAME.git

release-tag-windows:
  stage: release
  tags:
    - win-participants
  before_script:
    - echo "Skip e2e install in before_script for windows participants"
  only:
    - tags
  script:
    - $env:DOCKER_HOST = ''
    - $env:DOCKER_TLS_CERTDIR = ''
    - $env:DOCKER_TLS_VERIFY = ''
    - $env:DOCKER_CERT_PATH = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    # Gets the current image that was built in the CI for this commit
    - docker pull "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag from git
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "$REPO_URL/$BASE_IMAGE_NAME-windows:$(git describe --tags --abbrev=0)"
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "polyswarm/$BASE_IMAGE_NAME-windows:$(git describe --tags --abbrev=0)"
    # Pushes to AWS
    - docker push "$REPO_URL/$BASE_IMAGE_NAME-windows:$(git describe --tags --abbrev=0)"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/$BASE_IMAGE_NAME-windows:$(git describe --tags --abbrev=0)"

release-latest-windows:
  stage: release
  tags:
    - win-participants
  before_script:
    - echo "Skip e2e install in before_script for windows participants"
  only:
    - master
  script:
    - $env:DOCKER_HOST = ''
    - $env:DOCKER_TLS_CERTDIR = ''
    - $env:DOCKER_TLS_VERIFY = ''
    - $env:DOCKER_CERT_PATH = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    # Gets the current image that was built in the CI for this commit
    - docker pull "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "$REPO_URL/$BASE_IMAGE_NAME-windows:latest"
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "polyswarm/$BASE_IMAGE_NAME-windows:latest"
    # Pushes to AWS
    - docker push "$REPO_URL/$BASE_IMAGE_NAME-windows:latest"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/$BASE_IMAGE_NAME-windows:latest"

###############################################################
# Deployment Stage
###############################################################

kick-polyswarm-client-internal:
  stage: deployment
  only:
    - master
  trigger: externalci/polyswarm-client-internal

kick-after-complete13:
  stage: deployment
  variables:
    BASE_IMAGE_NAME: poly-mon
  only:
    - master
  trigger: externalci/poly-mon


image: $REPO_URL/stage

services:
  - docker:dind

stages:
  - prebuild
  - build
  - test
  - e2e
  - release
  - deployment

variables:
  DOCKER_HOST: tcp://localhost:2375/
  BASE_IMAGE_NAME: polyswarm-client

default:
  before_script:
    - pip install $END_TO_END_LIB@$CI_COMMIT_REF_NAME || pip install $END_TO_END_LIB
    - e2e init

###############################################################
# Build Stage (jobs inside a stage run in parallel)
###############################################################
build-linux:
  stage: build
  tags:
    - kube
  script:
    - e2e dependencies docker/Dockerfile $BASE_IMAGE_NAME
    - docker build
      -f docker/Dockerfile
      -t $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
      -t $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG
      --cache-from=$REPO_URL/$BASE_IMAGE_NAME:latest
      .
    - docker push $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG

build-windows:
  stage: build
  tags:
    - win-participants
  before_script:
    - echo "Skip e2e install in before_script for windows participants"
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    - docker pull $REPO_URL/$BASE_IMAGE_NAME-windows:latest
    - docker build
      -f docker/windows/Dockerfile
      -t $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA
      -t $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_REF_SLUG
      --cache-from=$REPO_URL/$BASE_IMAGE_NAME-windows:latest
      .
    - docker push $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA
    - docker push $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_REF_SLUG

build-base-windows:
  stage: prebuild
  tags:
    - win-participants
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    - docker build -f docker/windows/base/Dockerfile -t $REPO_URL/python37-windowsservercore-1809:latest .
    - docker push $REPO_URL/python37-windowsservercore-1809:latest
  only:
    changes:
      - docker/windows/base/Dockerfile

###############################################################
# Test Stage
###############################################################

test-linux:
  stage: test
  tags:
    - kube
  script:
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    - docker run $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA pytest -s --cov=polyswarmclient

test-push-to-pypi:
  stage: test
  tags:
    - kube
  only:
    - tags
  script:
    # TODO: Maybe consider executing this inside the polyswarm-client image we just built
    - python setup.py sdist bdist_wheel
    # Using env variables from Gitlab: TWINE_USERNAME, TWINE_PASSWORD, TWINE_REPOSITORY_URL
    # Will try to upload on V.V.VrcN tags, but will not fail if the version already exists in test.pypi.org
    - twine upload --skip-existing --repository-url $TWINE_REPOSITORY_URL_TEST -u $TWINE_USERNAME_TEST -p $TWINE_PASSWORD_TEST dist/*

test-windows:
  stage: test
  tags:
    - win-participants
  before_script:
    - echo "Skip e2e install in before_script for windows participants"
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    - docker pull $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA
    - docker run $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA powershell -NoProfile -Command "Set-Location C:/polyswarm/$BASE_IMAGE_NAME; pytest -s --cov=polyswarmclient"

###############################################################
# End-to-end Stage
###############################################################

e2e:
  stage: e2e
  tags:
    - kube
  script:
    - e2e run

###############################################################
# Release Stage
###############################################################

release-tag-linux:
  stage: release
  tags:
    - kube
  only:
    - tags
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag from git
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA $REPO_URL/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA polyswarm/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    # Pushes to AWS
    - docker push $REPO_URL/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)

release-latest-linux:
  stage: release
  tags:
    - kube
  only:
    - master
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA $REPO_URL/$BASE_IMAGE_NAME:latest
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA polyswarm/$BASE_IMAGE_NAME:latest
    # Pushes to AWS
    - docker push $REPO_URL/$BASE_IMAGE_NAME:latest
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/$BASE_IMAGE_NAME:latest

push-to-pypi:
  stage: release
  tags:
    - kube
  only:
    - tags
  script:
    - python setup.py sdist bdist_wheel

    # check git tag version vs setup.py version. bail if not equal.
    - >-
      tagver=$(git describe --abbrev=0 --tags)
      setupver=$(grep "version=" setup.py | cut -d"'" -f 2)

      if [ $tagver != $setupver ]; then
        echo "git tag version ($tagver) does not match setup.py version ($setupver)"
        exit 1
      fi

    # using env variables from Gitlab: TWINE_USERNAME, TWINE_PASSWORD, TWINE_REPOSITORY_URL
    - twine upload dist/*

release-tag-windows:
  stage: release
  tags:
    - win-participants
  before_script:
    - echo "Skip e2e install in before_script for windows participants"
  only:
    - tags
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    # Gets the current image that was built in the CI for this commit
    - docker pull "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag from git
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "$REPO_URL/$BASE_IMAGE_NAME-windows:$(git describe --tags --abbrev=0)"
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "polyswarm/$BASE_IMAGE_NAME-windows:$(git describe --tags --abbrev=0)"
    # Pushes to AWS
    - docker push "$REPO_URL/$BASE_IMAGE_NAME-windows:$(git describe --tags --abbrev=0)"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/$BASE_IMAGE_NAME-windows:$(git describe --tags --abbrev=0)"

release-latest-windows:
  stage: release
  tags:
    - win-participants
  before_script:
    - echo "Skip e2e install in before_script for windows participants"
  only:
    - master
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    # Gets the current image that was built in the CI for this commit
    - docker pull "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "$REPO_URL/$BASE_IMAGE_NAME-windows:latest"
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "polyswarm/$BASE_IMAGE_NAME-windows:latest"
    # Pushes to AWS
    - docker push "$REPO_URL/$BASE_IMAGE_NAME-windows:latest"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/$BASE_IMAGE_NAME-windows:latest"

###############################################################
# Deployment Stage
###############################################################

kick-after-complete1:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-ikarus

kick-after-complete3:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-drweb

kick-after-complete4:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-rising

kick-after-complete5:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-iris-h
kick-after-complete6:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-intezer-analyze

kick-after-complete7:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-zerocert

kick-after-complete8:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-virusdie
kick-after-complete9:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-cyradar

kick-after-complete10:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-nucleon

kick-after-complete12:
  stage: deployment
  only:
    - master
  trigger: externalci/polyswarm-client-windows

kick-after-complete13:
  stage: deployment
  variables:
    BASE_IMAGE_NAME: poly-mon
  only:
    - master
  trigger: externalci/poly-mon

kick-after-complete14:
  stage: deployment
  variables:
    BASE_IMAGE_NAME: consumer
  only:
    - master
  trigger: externalci/consumer

kick-after-complete15:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-crowdstrike-falcon

kick-after-complete17:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-inscyt

kick-after-complete18:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-phishtank

kick-after-complete19:
  stage: deployment
  only:
    - master
  trigger: externalci/arbiter-hatchingtriage

kick-after-complete20:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-quttera

kick-after-complete21:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-concinnity

kick-after-complete22:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-venustech

kick-after-complete23:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-notmining

kick-after-complete24:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-urlhaus

kick-after-complete25:
  stage: deployment
  only:
    - master
  trigger: externalci/microengine-urlscanio

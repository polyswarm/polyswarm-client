# Based on eth-bloom (https://github.com/ethereum/eth-bloom, used under MIT
# license) with modifications

from hypothesis import strategies as st, given, settings
from polyswarmclient.ethereum.bloom import BloomFilter

value = st.binary(max_size=32)
values = st.lists(value, min_size=0, max_size=256)


def check_bloom(bloom, values):
    for v in values:
        assert v in bloom


@given(values)
@settings(max_examples=2000)
def test_bloom_filter_add(values):
    bloom = BloomFilter()

    for v in values:
        bloom.add(v)

    check_bloom(bloom, values)


@given(values)
@settings(max_examples=2000)
def test_bloom_filter_extend(values):
    bloom = BloomFilter()
    bloom.extend(values)

    check_bloom(bloom, values)


@given(values)
@settings(max_examples=2000)
def test_bloom_filter_from_iterable(values):
    bloom = BloomFilter.from_iterable(values)
    check_bloom(bloom, values)


def test_casting_to_integer():
    bloom = BloomFilter()

    assert int(bloom) == 0

    bloom.add(b'value 1')
    bloom.add(b'value 2')

    assert int(bloom) == int(
        '0x800000000020400000000000000200000000000000000000000000000000000100000000000000'
        '00020000000001000002000000000000000000000000000000000000000000000000000000000000'
        '80000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000200100020000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000200000000000020000000000000000000000000000000000'
        '00000000000080000000000001000000', 0)


def test_casting_to_binary():
    bloom = BloomFilter()

    assert bin(bloom.value) == '0b0'

    bloom.add(b'value 1')
    bloom.add(b'value 2')

    assert bin(bloom.value) == (
        '0b100000000000000000000000000000000000000000100000010000000000000000000000000000'
        '00000000000000000000000000000000100000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000100000000000000000000000000000000000000000000000000000000000000'
        '00000000100000000000000000000000000000000000000001000000000000000000000010000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000100000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000010000000000001000000000000001000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000100000000000000000000000000000000000'
        '00000000000000001000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000'
        '00000000000000000000000000000000000000000010000000000000000000000000000000000000'
        '000000000000000001000000000000000000000000')


def test_combining_filters():
    b1 = BloomFilter()
    b2 = BloomFilter()

    b1.add(b'a')
    b1.add(b'b')
    b1.add(b'c')

    b2.add(b'd')
    b2.add(b'e')
    b2.add(b'f')

    b1.add(b'common')
    b2.add(b'common')

    assert b'a' in b1
    assert b'b' in b1
    assert b'c' in b1

    assert b'a' not in b2
    assert b'b' not in b2
    assert b'c' not in b2

    assert b'd' in b2
    assert b'e' in b2
    assert b'f' in b2

    assert b'd' not in b1
    assert b'e' not in b1
    assert b'f' not in b1

    assert b'common' in b1
    assert b'common' in b2

    b3 = b1 | b2

    assert b'a' in b3
    assert b'b' in b3
    assert b'c' in b3
    assert b'd' in b3
    assert b'e' in b3
    assert b'f' in b3
    assert b'common' in b3

    b4 = b1 + b2

    assert b'a' in b4
    assert b'b' in b4
    assert b'c' in b4
    assert b'd' in b4
    assert b'e' in b4
    assert b'f' in b4
    assert b'common' in b4

    b5 = BloomFilter(int(b1))
    b5 |= b2

    assert b'a' in b5
    assert b'b' in b5
    assert b'c' in b5
    assert b'd' in b5
    assert b'e' in b5
    assert b'f' in b5
    assert b'common' in b5

    b6 = BloomFilter(int(b1))
    b6 += b2

    assert b'a' in b6
    assert b'b' in b6
    assert b'c' in b6
    assert b'd' in b6
    assert b'e' in b6
    assert b'f' in b6
    assert b'common' in b6
